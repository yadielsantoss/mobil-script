local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = " " .. Fluent.Version,
    SubTitle = "By iamrich",
    TabWidth = 160,
    Size = UDim2.fromOffset(240, 40),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = {
    New = Window:AddTab({ Title = "New", Icon = "" }),
    Update = Window:AddTab({ Title = "Update", Icon = "" }),
    Iamrich = Window:AddTab({ Title = "Iamrich", Icon = "" }),
    Jean = Window:AddTab({ Title = "Jean part", Icon = "" }),
    Lucifer = Window:AddTab({ Title = "Lucifer part", Icon = "" }),
    Jaybo = Window:AddTab({ Title = "Jaybo part", Icon = "" }),
    Cherise = Window:AddTab({ Title = "Cherise part", Icon = "" }),
    ZE = Window:AddTab({ Title = "ZE part", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    Mutate = Window:AddTab({ Title = "mutate,cosmic", Icon = "" }),
    Lock = Window:AddTab({ Title = "Lock,Unlock", Icon = "" }),
}


local Toggle = Tabs.Jean:AddToggle("STRENGTH", {Title = "GhostPirate Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "GhostPirate", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.ZE:AddToggle("STRENGTH", {Title = "GhostPirate Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "GhostPirate", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Jean:AddToggle("STRENGTH", {Title = "GhostKraken Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "GhostKraken", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Jean:AddToggle("STRENGTH", {Title = "Rust Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Rust", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

Tabs.Jean:AddParagraph({
    Title = "The GhostPirate egg it 2.5 speed",
    Content = "speed 2.5"
})

local Toggle = Tabs.Jean:AddToggle("STRENGTH", {Title = "GhostPirate Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "GhostPirate", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(2.5)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

Tabs.Jean:AddButton({
    Title = "AFK",
    Description = "AFK",
    Callback = function()
        wait(0.5)local ba=Instance.new("ScreenGui")
        local ca=Instance.new("TextLabel")local da=Instance.new("Frame")
        local _b=Instance.new("TextLabel")local ab=Instance.new("TextLabel")ba.Parent=game.CoreGui
        ba.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;ca.Parent=ba;ca.Active=true
        ca.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ca.Draggable=true
        ca.Position=UDim2.new(0.698610067,0,0.098096624,0)ca.Size=UDim2.new(0,370,0,52)
        ca.Font=Enum.Font.SourceSansSemibold;ca.Text="Anti AFK Script"ca.TextColor3=Color3.new(0,1,1)
        ca.TextSize=22;da.Parent=ca
        da.BackgroundColor3=Color3.new(0.196078,0.196078,0.196078)da.Position=UDim2.new(0,0,1.0192306,0)
        da.Size=UDim2.new(0,370,0,107)_b.Parent=da
        _b.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)_b.Position=UDim2.new(0,0,0.800455689,0)
        _b.Size=UDim2.new(0,370,0,21)_b.Font=Enum.Font.Arial;_b.Text="made by iamrich "
        _b.TextColor3=Color3.new(0,1,1)_b.TextSize=20;ab.Parent=da
        ab.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ab.Position=UDim2.new(0,0,0.158377,0)
        ab.Size=UDim2.new(0,370,0,44)ab.Font=Enum.Font.ArialBold;ab.Text="Status: Active"
        ab.TextColor3=Color3.new(0,1,1)ab.TextSize=20;local bb=game:service'VirtualUser'
        game:service'Players'.LocalPlayer.Idled:connect(function()
        bb:CaptureController()bb:ClickButton2(Vector2.new())
        ab.Text="Roblox tried to kick u but i kicked him instead"wait(2)ab.Text="Status : Active"end)
    end
})


local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "PirateFish Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "PirateFish", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "PirateShark Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "PirateShark", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "roll aura", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("AuraService"):WaitForChild("RF"):WaitForChild("Roll"):InvokeServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "boss PirateKing", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "PirateKing",
                    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("TreasureIsland"):WaitForChild("NPC"):WaitForChild("PirateKing"):WaitForChild("Table"),
                    [3] = "TreasureIsland"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "GhostPirate Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "GhostPirate", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("MyToggle", {Title = "merchant slot 1", Default = false })
local running = false  -- Keeps track of whether the loop should be running

Toggle:OnChanged(function(state) -- Detects toggle state change
    running = state  -- Updates the running status based on toggle

    if running then
        spawn(function() -- Start the loop only if toggle is ON
            while running do
                local args = {
                    [1] = "Treasure Merchant",
                    [2] = 1
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit")
                    :WaitForChild("Services"):WaitForChild("LimitedMerchantService")
                    :WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

                wait(1) -- Delay to prevent excessive requests

                if not running then break end -- Exit loop if toggle is turned OFF
            end
        end)
    end
end)


local Toggle = Tabs.Lucifer:AddToggle("MyToggle", {Title = "merchant slot 2", Default = false })
local running = false  -- Keeps track of whether the loop should be running

Toggle:OnChanged(function(state) -- Detects toggle state change
    running = state  -- Updates the running status based on toggle

    if running then
        spawn(function() -- Start the loop only if toggle is ON
            while running do
                local args = {
                    [1] = "Treasure Merchant",
                    [2] = 2
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit")
                    :WaitForChild("Services"):WaitForChild("LimitedMerchantService")
                    :WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

                wait(1) -- Delay to prevent excessive requests

                if not running then break end -- Exit loop if toggle is turned OFF
            end
        end)
    end
end)


local Toggle = Tabs.Lucifer:AddToggle("MyToggle", {Title = "merchant slot 3", Default = false })
local running = false  -- Keeps track of whether the loop should be running

Toggle:OnChanged(function(state) -- Detects toggle state change
    running = state  -- Updates the running status based on toggle

    if running then
        spawn(function() -- Start the loop only if toggle is ON
            while running do
                local args = {
                    [1] = "Treasure Merchant",
                    [2] = 3
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit")
                    :WaitForChild("Services"):WaitForChild("LimitedMerchantService")
                    :WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

                wait(1) -- Delay to prevent excessive requests

                if not running then break end -- Exit loop if toggle is turned OFF
            end
        end)
    end
end)


local Toggle = Tabs.Lucifer:AddToggle("MyToggle", {Title = "merchant slot 4", Default = false })
local running = false  -- Keeps track of whether the loop should be running

Toggle:OnChanged(function(state) -- Detects toggle state change
    running = state  -- Updates the running status based on toggle

    if running then
        spawn(function() -- Start the loop only if toggle is ON
            while running do
                local args = {
                    [1] = "Treasure Merchant",
                    [2] = 4
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit")
                    :WaitForChild("Services"):WaitForChild("LimitedMerchantService")
                    :WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

                wait(1) -- Delay to prevent excessive requests

                if not running then break end -- Exit loop if toggle is turned OFF
            end
        end)
    end
end)


local Toggle = Tabs.Lucifer:AddToggle("MyToggle", {Title = "merchant slot 5", Default = false })
local running = false  -- Keeps track of whether the loop should be running

Toggle:OnChanged(function(state) -- Detects toggle state change
    running = state  -- Updates the running status based on toggle

    if running then
        spawn(function() -- Start the loop only if toggle is ON
            while running do
                local args = {
                    [1] = "Treasure Merchant",
                    [2] = 5
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit")
                    :WaitForChild("Services"):WaitForChild("LimitedMerchantService")
                    :WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

                wait(1) -- Delay to prevent excessive requests

                if not running then break end -- Exit loop if toggle is turned OFF
            end
        end)
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "Ghost Fortune 10x", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Ghost Fortune",
                    [2] = "x25"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "GhostKraken Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "GhostKraken", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "boss CaptainAshfang", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "CaptainAshfang",
                    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("GhostIsland"):WaitForChild("NPC"):WaitForChild("CaptainAshfang"):WaitForChild("Table"),
                    [3] = "GhostIsland"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))
            
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "boss ManagerMike", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "ManagerMike",
                    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("18"):WaitForChild("NPC"):WaitForChild("ManagerMike"):WaitForChild("Table"),
                    [3] = "18"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "boss Overseer", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Overseer",
                    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("15"):WaitForChild("NPC"):WaitForChild("Overseer"):WaitForChild("Table"),
                    [3] = "15"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)


local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "Sport Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Sport", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "world 15 wheel", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Divine Fortune",
                    [2] = "x25"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Lucifer:AddToggle("STRENGTH", {Title = "boss CaptainBarrow", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "CaptainBarrow",
                    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("PirateGetaway"):WaitForChild("NPC"):WaitForChild("CaptainBarrow"):WaitForChild("Table"),
                    [3] = "PirateGetaway"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))
                                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

Tabs.Lucifer:AddButton({
    Title = "AFK",
    Description = "AFK",
    Callback = function()
        wait(0.5)local ba=Instance.new("ScreenGui")
        local ca=Instance.new("TextLabel")local da=Instance.new("Frame")
        local _b=Instance.new("TextLabel")local ab=Instance.new("TextLabel")ba.Parent=game.CoreGui
        ba.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;ca.Parent=ba;ca.Active=true
        ca.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ca.Draggable=true
        ca.Position=UDim2.new(0.698610067,0,0.098096624,0)ca.Size=UDim2.new(0,370,0,52)
        ca.Font=Enum.Font.SourceSansSemibold;ca.Text="Anti AFK Script"ca.TextColor3=Color3.new(0,1,1)
        ca.TextSize=22;da.Parent=ca
        da.BackgroundColor3=Color3.new(0.196078,0.196078,0.196078)da.Position=UDim2.new(0,0,1.0192306,0)
        da.Size=UDim2.new(0,370,0,107)_b.Parent=da
        _b.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)_b.Position=UDim2.new(0,0,0.800455689,0)
        _b.Size=UDim2.new(0,370,0,21)_b.Font=Enum.Font.Arial;_b.Text="made by iamrich "
        _b.TextColor3=Color3.new(0,1,1)_b.TextSize=20;ab.Parent=da
        ab.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ab.Position=UDim2.new(0,0,0.158377,0)
        ab.Size=UDim2.new(0,370,0,44)ab.Font=Enum.Font.ArialBold;ab.Text="Status: Active"
        ab.TextColor3=Color3.new(0,1,1)ab.TextSize=20;local bb=game:service'VirtualUser'
        game:service'Players'.LocalPlayer.Idled:connect(function()
        bb:CaptureController()bb:ClickButton2(Vector2.new())
        ab.Text="Roblox tried to kick u but i kicked him instead"wait(2)ab.Text="Status : Active"end)
    end
})

local Toggle = Tabs.Jaybo:AddToggle("STRENGTH", {Title = "boss CaptainBarrow", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "CaptainBarrow",
                    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("PirateGetaway"):WaitForChild("NPC"):WaitForChild("CaptainBarrow"):WaitForChild("Table"),
                    [3] = "PirateGetaway"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))
                                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.ZE:AddToggle("STRENGTH", {Title = "boss CaptainBarrow", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "CaptainBarrow",
                    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("PirateGetaway"):WaitForChild("NPC"):WaitForChild("CaptainBarrow"):WaitForChild("Table"),
                    [3] = "PirateGetaway"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))
                                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Jaybo:AddToggle("STRENGTH", {Title = "Captain Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Captain", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)


Tabs.Jaybo:AddButton({
    Title = "AFK",
    Description = "AFK",
    Callback = function()
        wait(0.5)local ba=Instance.new("ScreenGui")
        local ca=Instance.new("TextLabel")local da=Instance.new("Frame")
        local _b=Instance.new("TextLabel")local ab=Instance.new("TextLabel")ba.Parent=game.CoreGui
        ba.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;ca.Parent=ba;ca.Active=true
        ca.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ca.Draggable=true
        ca.Position=UDim2.new(0.698610067,0,0.098096624,0)ca.Size=UDim2.new(0,370,0,52)
        ca.Font=Enum.Font.SourceSansSemibold;ca.Text="Anti AFK Script"ca.TextColor3=Color3.new(0,1,1)
        ca.TextSize=22;da.Parent=ca
        da.BackgroundColor3=Color3.new(0.196078,0.196078,0.196078)da.Position=UDim2.new(0,0,1.0192306,0)
        da.Size=UDim2.new(0,370,0,107)_b.Parent=da
        _b.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)_b.Position=UDim2.new(0,0,0.800455689,0)
        _b.Size=UDim2.new(0,370,0,21)_b.Font=Enum.Font.Arial;_b.Text="made by iamrich "
        _b.TextColor3=Color3.new(0,1,1)_b.TextSize=20;ab.Parent=da
        ab.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ab.Position=UDim2.new(0,0,0.158377,0)
        ab.Size=UDim2.new(0,370,0,44)ab.Font=Enum.Font.ArialBold;ab.Text="Status: Active"
        ab.TextColor3=Color3.new(0,1,1)ab.TextSize=20;local bb=game:service'VirtualUser'
        game:service'Players'.LocalPlayer.Idled:connect(function()
        bb:CaptureController()bb:ClickButton2(Vector2.new())
        ab.Text="Roblox tried to kick u but i kicked him instead"wait(2)ab.Text="Status : Active"end)
    end
})

local Toggle = Tabs.Cherise:AddToggle("STRENGTH", {Title = "Captain Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Captain", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)


local Toggle = Tabs.Cherise:AddToggle("STRENGTH", {Title = "auto Captain Chest", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Captain Chest"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TreasureChestService"):WaitForChild("RF"):WaitForChild("Craft"):InvokeServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

Tabs.Cherise:AddButton({
    Title = "AFK",
    Description = "AFK",
    Callback = function()
        wait(0.5)local ba=Instance.new("ScreenGui")
        local ca=Instance.new("TextLabel")local da=Instance.new("Frame")
        local _b=Instance.new("TextLabel")local ab=Instance.new("TextLabel")ba.Parent=game.CoreGui
        ba.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;ca.Parent=ba;ca.Active=true
        ca.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ca.Draggable=true
        ca.Position=UDim2.new(0.698610067,0,0.098096624,0)ca.Size=UDim2.new(0,370,0,52)
        ca.Font=Enum.Font.SourceSansSemibold;ca.Text="Anti AFK Script"ca.TextColor3=Color3.new(0,1,1)
        ca.TextSize=22;da.Parent=ca
        da.BackgroundColor3=Color3.new(0.196078,0.196078,0.196078)da.Position=UDim2.new(0,0,1.0192306,0)
        da.Size=UDim2.new(0,370,0,107)_b.Parent=da
        _b.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)_b.Position=UDim2.new(0,0,0.800455689,0)
        _b.Size=UDim2.new(0,370,0,21)_b.Font=Enum.Font.Arial;_b.Text="made by iamrich "
        _b.TextColor3=Color3.new(0,1,1)_b.TextSize=20;ab.Parent=da
        ab.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ab.Position=UDim2.new(0,0,0.158377,0)
        ab.Size=UDim2.new(0,370,0,44)ab.Font=Enum.Font.ArialBold;ab.Text="Status: Active"
        ab.TextColor3=Color3.new(0,1,1)ab.TextSize=20;local bb=game:service'VirtualUser'
        game:service'Players'.LocalPlayer.Idled:connect(function()
        bb:CaptureController()bb:ClickButton2(Vector2.new())
        ab.Text="Roblox tried to kick u but i kicked him instead"wait(2)ab.Text="Status : Active"end)
    end
})




























local Toggle = Tabs.Iamrich:AddToggle("STRENGTH", {Title = "GhostKraken Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "GhostKraken", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Iamrich:AddToggle("STRENGTH", {Title = "GhostPirate Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "GhostPirate", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Iamrich:AddToggle("STRENGTH", {Title = "PirateShark Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "PirateShark", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Iamrich:AddToggle("STRENGTH", {Title = "PirateFish Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "PirateFish", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Iamrich:AddToggle("STRENGTH", {Title = "Captain Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Captain", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Iamrich:AddToggle("STRENGTH", {Title = "Ghost Fortune 10x", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Ghost Fortune",
                    [2] = "x25"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Iamrich:AddToggle("MyToggle", {Title = "Treasure Merchant slot 1", Default = false })
local running = false  -- Keeps track of whether the loop should be running

Toggle:OnChanged(function(state) -- Detects toggle state change
    running = state  -- Updates the running status based on toggle

    if running then
        spawn(function() -- Start the loop only if toggle is ON
            while running do
                local args = {
                    [1] = "Treasure Merchant",
                    [2] = 1
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit")
                    :WaitForChild("Services"):WaitForChild("LimitedMerchantService")
                    :WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

                wait(1) -- Delay to prevent excessive requests

                if not running then break end -- Exit loop if toggle is turned OFF
            end
        end)
    end
end)


local Toggle = Tabs.Iamrich:AddToggle("MyToggle", {Title = "Treasure Merchant slot 2", Default = false })
local running = false  -- Keeps track of whether the loop should be running

Toggle:OnChanged(function(state) -- Detects toggle state change
    running = state  -- Updates the running status based on toggle

    if running then
        spawn(function() -- Start the loop only if toggle is ON
            while running do
                local args = {
                    [1] = "Treasure Merchant",
                    [2] = 2
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit")
                    :WaitForChild("Services"):WaitForChild("LimitedMerchantService")
                    :WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

                wait(1) -- Delay to prevent excessive requests

                if not running then break end -- Exit loop if toggle is turned OFF
            end
        end)
    end
end)


local Toggle = Tabs.Iamrich:AddToggle("MyToggle", {Title = "Treasure Merchant slot 3", Default = false })
local running = false  -- Keeps track of whether the loop should be running

Toggle:OnChanged(function(state) -- Detects toggle state change
    running = state  -- Updates the running status based on toggle

    if running then
        spawn(function() -- Start the loop only if toggle is ON
            while running do
                local args = {
                    [1] = "Treasure Merchant",
                    [2] = 3
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit")
                    :WaitForChild("Services"):WaitForChild("LimitedMerchantService")
                    :WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

                wait(1) -- Delay to prevent excessive requests

                if not running then break end -- Exit loop if toggle is turned OFF
            end
        end)
    end
end)

local Toggle = Tabs.Iamrich:AddToggle("MyToggle", {Title = "Treasure Merchant slot 4", Default = false })
local running = false  -- Keeps track of whether the loop should be running

Toggle:OnChanged(function(state) -- Detects toggle state change
    running = state  -- Updates the running status based on toggle

    if running then
        spawn(function() -- Start the loop only if toggle is ON
            while running do
                local args = {
                    [1] = "Treasure Merchant",
                    [2] = 4
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit")
                    :WaitForChild("Services"):WaitForChild("LimitedMerchantService")
                    :WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

                wait(1) -- Delay to prevent excessive requests

                if not running then break end -- Exit loop if toggle is turned OFF
            end
        end)
    end
end)



local Toggle = Tabs.Iamrich:AddToggle("MyToggle", {Title = "Treasure Merchant slot 5", Default = false })
local running = false  -- Keeps track of whether the loop should be running

Toggle:OnChanged(function(state) -- Detects toggle state change
    running = state  -- Updates the running status based on toggle

    if running then
        spawn(function() -- Start the loop only if toggle is ON
            while running do
                local args = {
                    [1] = "Treasure Merchant",
                    [2] = 5
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit")
                    :WaitForChild("Services"):WaitForChild("LimitedMerchantService")
                    :WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

                wait(1) -- Delay to prevent excessive requests

                if not running then break end -- Exit loop if toggle is turned OFF
            end
        end)
    end
end)









































































































































local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Superhero Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Superhero", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Supervillain Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Supervillain", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Jolt", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["SuperheroCity-Jolt"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Radiance", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["SuperheroCity-Radiance"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Phantom", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["SuperheroCity-Phantom"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Inferno", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["SuperheroCity-Inferno"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Spectron", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["EvilLair-Spectron"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Vortex", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["EvilLair-Vortex"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Skullbane", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["EvilLair-Skullbane"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Dreadlord", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["EvilLair-Dreadlord"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Dumbells", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "HeroCity",
                    [2] = "Dumbells",
                    [3] = "HeroCity12"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onGuiEquipRequest"):FireServer(unpack(args))

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onClick"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "All upgrade", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Super Power Multiplier"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("HeroUpgradeService"):WaitForChild("RF"):WaitForChild("BuyUpgrade"):InvokeServer(unpack(args))

                local args = {
                    [1] = "Super Knuckles Multiplier"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("HeroUpgradeService"):WaitForChild("RF"):WaitForChild("BuyUpgrade"):InvokeServer(unpack(args))

                local args = {
                    [1] = "Super Coin Multiplier"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("HeroUpgradeService"):WaitForChild("RF"):WaitForChild("BuyUpgrade"):InvokeServer(unpack(args))

                local args = {
                    [1] = "Gem Chance Multiplier"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("HeroUpgradeService"):WaitForChild("RF"):WaitForChild("BuyUpgrade"):InvokeServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Skullshade", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Skullshade",
                    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("HeroCity"):WaitForChild("NPC"):WaitForChild("Skullshade"):WaitForChild("Table"),
                    [3] = "HeroCity"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "HeroSpeedrun", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "HeroSpeedrun"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpeedrunMinigameService"):WaitForChild("RF"):WaitForChild("EnterSpeedrun"):InvokeServer(unpack(args))
                
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-10949.7832, 63.7595329, 5928.90137, 1, 0, 0, 0, 1, 0, 0, 0, 1)
wait()
                -- Sleep for a short period to prevent overwhelming the server
                wait(620)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Evil Merchant 1", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Evil Merchant",
                    [2] = 1
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
                
                             -- Sleep for a short period to prevent overwhelming the server
                wait(120)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Evil Merchant 2", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Evil Merchant",
                    [2] = 2
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
                
                             -- Sleep for a short period to prevent overwhelming the server
                wait(120)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Evil Merchant 3", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Evil Merchant",
                    [2] = 3
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
                
                             -- Sleep for a short period to prevent overwhelming the server
                wait(120)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Evil Merchant 4", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Evil Merchant",
                    [2] = 4
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
                
                             -- Sleep for a short period to prevent overwhelming the server
                wait(120)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Evil Merchant 5", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Evil Merchant",
                    [2] = 5
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
                
                             -- Sleep for a short period to prevent overwhelming the server
                wait(120)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

Tabs.New:AddButton({
    Title = "AFK",
    Description = "AFK",
    Callback = function()
        wait(0.5)local ba=Instance.new("ScreenGui")
        local ca=Instance.new("TextLabel")local da=Instance.new("Frame")
        local _b=Instance.new("TextLabel")local ab=Instance.new("TextLabel")ba.Parent=game.CoreGui
        ba.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;ca.Parent=ba;ca.Active=true
        ca.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ca.Draggable=true
        ca.Position=UDim2.new(0.698610067,0,0.098096624,0)ca.Size=UDim2.new(0,370,0,52)
        ca.Font=Enum.Font.SourceSansSemibold;ca.Text="Anti AFK Script"ca.TextColor3=Color3.new(0,1,1)
        ca.TextSize=22;da.Parent=ca
        da.BackgroundColor3=Color3.new(0.196078,0.196078,0.196078)da.Position=UDim2.new(0,0,1.0192306,0)
        da.Size=UDim2.new(0,370,0,107)_b.Parent=da
        _b.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)_b.Position=UDim2.new(0,0,0.800455689,0)
        _b.Size=UDim2.new(0,370,0,21)_b.Font=Enum.Font.Arial;_b.Text="made by iamrich "
        _b.TextColor3=Color3.new(0,1,1)_b.TextSize=20;ab.Parent=da
        ab.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ab.Position=UDim2.new(0,0,0.158377,0)
        ab.Size=UDim2.new(0,370,0,44)ab.Font=Enum.Font.ArialBold;ab.Text="Status: Active"
        ab.TextColor3=Color3.new(0,1,1)ab.TextSize=20;local bb=game:service'VirtualUser'
        game:service'Players'.LocalPlayer.Idled:connect(function()
        bb:CaptureController()bb:ClickButton2(Vector2.new())
        ab.Text="Roblox tried to kick u but i kicked him instead"wait(2)ab.Text="Status : Active"end)
    end
})















































Tabs.Mutate:AddParagraph({
    Title = "This is for cure",
    Content = "If u selet the Ghost it will  cure all pet but no the Ghost"
})

Tabs.Mutate:AddParagraph({
    Title = "so use the one is Rainbow,Ghost,Cosmic it will cure all pet but no the one u selet",
    Content = ""
})

local Toggle = Tabs.Mutate:AddToggle("MyToggle", {Title = "Mutate", Default = false})

-- Reference to services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
local mutateRF = PetCombineService:WaitForChild("RF"):WaitForChild("mutate")

-- Function to automatically mutate pets
local function autoMutatePets()
    -- Get the pet container from the player's UI
    local player = game.Players.LocalPlayer
    local petsContainer = player.PlayerGui.GameUI.Menus.Mutate.Container.Left.Pets

    -- Loop through all pet UI elements inside the container
    for _, petUI in ipairs(petsContainer:GetChildren()) do
        -- Get the pet name from the pet UI element
        local petName = petUI.Name

        -- Make sure the pet name exists
        if petName then
            -- Assuming pet names are mapped directly to pet IDs (you may need to adjust this logic if needed)
            local petId = petName  -- Adjust this if necessary to map the pet name to a unique ID

            -- Create the arguments for the mutate function
            local args = {
                [1] = petId,  -- The pet ID
                [2] = {}      -- An empty table as the second argument
            }

            -- Invoke the mutate function on the server
            mutateRF:InvokeServer(unpack(args))
            print("Mutating pet: " .. petId)  -- Debug message to confirm the pet is being mutated
        end
    end
end

-- Variable to check if the toggle is on
local isToggleOn = Toggle.Value

-- Loop when toggle is on
Toggle:OnChanged(function()
    -- Check if the toggle is on
    if Toggle.Value then
        isToggleOn = true
        -- Run a loop to auto mutate pets every 1 second
        while isToggleOn do
            autoMutatePets()
            wait(1)  -- Delay of 1 second
        end
    else
        -- If toggle is off, stop the loop
        isToggleOn = false
    end
end)



local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Rainbow,Ghost", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Rainbow" or attrValue == "Ghost" or attrValue == ".") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)

local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Rainbow,Ghost,Cosmic", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Rainbow" or attrValue == "Ghost" or attrValue == "Cosmic") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)

local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Ghost,Cosmic", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "" or attrValue == "Ghost" or attrValue == "Cosmic") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)

local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Rainbow", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Rainbow" or attrValue == "." or attrValue == ".") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)

local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Ghost", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Ghost" or attrValue == "." or attrValue == ".") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)


local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Cosmic", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Cosmic" or attrValue == "." or attrValue == ".") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)



local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Glowing", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Glowing" or attrValue == "." or attrValue == ".") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)
































Tabs.Lock:AddButton({
    Title = "Lock all pet",
    Description = "All your pets will be locked, but you won’t see the 🔒",
    Callback = function()
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                if lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end
    end
})


local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Glowing", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                if cureAttribute == "Glowing" and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Add a small delay to prevent excessive requests
    end
end)

local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Rainbow", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                if cureAttribute == "Rainbow" and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Add a small delay to prevent excessive requests
    end
end)


local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Ghost", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }
        local validCures = { ["Ghost"] = true, ["."] = true, ["."] = true } -- Allowed attributes

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                -- Check if Cure is in the allowed list and if pet is not already locked
                if validCures[cureAttribute] and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Small delay to prevent excessive requests
    end
end)

local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Cosmic", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }
        local validCures = { ["Cosmic"] = true, ["."] = true, ["."] = true } -- Allowed attributes

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                -- Check if Cure is in the allowed list and if pet is not already locked
                if validCures[cureAttribute] and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Small delay to prevent excessive requests
    end
end)


local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Glowing,Rainbow,Cosmic,Ghost", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }
        local validCures = { ["Glowing"] = true, ["Rainbow"] = true, ["Cosmic"] = true, ["Ghost"] = true} -- Allowed attributes

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                -- Check if Cure is in the allowed list and if pet is not already locked
                if validCures[cureAttribute] and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Small delay to prevent excessive requests
    end
end)

local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Ghost,Rainbow,Cosmic", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }
        local validCures = { ["Ghost"] = true, ["Rainbow"] = true, ["Cosmic"] = true } -- Allowed attributes

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                -- Check if Cure is in the allowed list and if pet is not already locked
                if validCures[cureAttribute] and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Small delay to prevent excessive requests
    end
end)

local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Ghost,Cosmic", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }
        local validCures = { ["Ghost"] = true, ["."] = true, ["Cosmic"] = true } -- Allowed attributes

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                -- Check if Cure is in the allowed list and if pet is not already locked
                if validCures[cureAttribute] and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Small delay to prevent excessive requests
    end
end)
