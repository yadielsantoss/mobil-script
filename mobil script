local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = " " .. Fluent.Version,
    SubTitle = "By iamrich",
    TabWidth = 160,
    Size = UDim2.fromOffset(240, 40),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = {
    Part3 = Window:AddTab({ Title = "Part3-event", Icon = "" }),
    New = Window:AddTab({ Title = "Part-1/2", Icon = "" }),
    Iamrich = Window:AddTab({ Title = "Old event", Icon = "" }),
    World19 = Window:AddTab({ Title = "World/19", Icon = "" }),
    Mutate = Window:AddTab({ Title = "mutate,cosmic", Icon = "" }),
    Lock = Window:AddTab({ Title = "Lock,Unlock", Icon = "" }),
    Other = Window:AddTab({ Title = "Other", Icon = "" }),
}





local Toggle = Tabs.World19:AddToggle("STRENGTH", {Title = "Soul Fire Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "SoulFire", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.World19:AddToggle("STRENGTH", {Title = "Soul Dominus Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "SoulDominus", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)



local Toggle = Tabs.World19:AddToggle("STRENGTH", {Title = "Barbells", Default = false})

local isRunning = false

Toggle:OnChanged(function(state)
	if state then
		if not isRunning then
			isRunning = true

			-- Auto equip only once
			local player = game:GetService("Players").LocalPlayer
			local bicepsStat = player:WaitForChild("leaderstats"):WaitForChild("Biceps").Value

			local barbellCheckList = {
				{name = "MagicCastle3", path = workspace.Zones["19"].Interactables.Training.Barbells.MagicCastle3, index = 3},
				{name = "MagicCastle2", path = workspace.Zones["19"].Interactables.Training.Barbells.MagicCastle2, index = 2},
				{name = "MagicCastle1", path = workspace.Zones["19"].Interactables.Training.Barbells.MagicCastle1, index = 1},
			}

			local selectedBarbell = nil

			for _, barbell in ipairs(barbellCheckList) do
				local textLabel = barbell.path.HeadStat.Frame.Frame.TextLabel
				local requiredStr = textLabel.Text
				local requiredValue = tonumber(requiredStr:match("%d+"))

				if requiredValue and bicepsStat >= requiredValue then
					selectedBarbell = barbell.name
					break
				end
			end

			if selectedBarbell then
				local args = {
					[1] = 19,
					[2] = "Barbells",
					[3] = selectedBarbell
				}

				game:GetService("ReplicatedStorage")
					:WaitForChild("Packages")
					:WaitForChild("Knit")
					:WaitForChild("Services")
					:WaitForChild("ToolService")
					:WaitForChild("RE")
					:WaitForChild("onEquipRequest")
					:FireServer(unpack(args))

				print("Equipped:", selectedBarbell)
			else
				print("Player does not meet the requirement for any MagicCastle barbell.")
			end

			-- Auto click loop
			task.spawn(function()
				while isRunning do
					game:GetService("ReplicatedStorage")
						:WaitForChild("Packages")
						:WaitForChild("Knit")
						:WaitForChild("Services")
						:WaitForChild("ToolService")
						:WaitForChild("RE")
						:WaitForChild("onClick")
						:FireServer()

					wait(0) -- adjust delay if needed
				end
			end)
		end
	else
		isRunning = false
	end
end)




















local Toggle = Tabs.Part3:AddToggle("STRENGTH", {Title = "CrystalVillain Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "CrystalVillain", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Part3:AddToggle("STRENGTH", {Title = "Villain trail", Default = false})

local isRunning = false

-- Function to run the loop
local function startLoop()
    while isRunning do
        -- Set the arguments for the egg purchase
        local args = {
            [1] = "Villain"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChampionshipService"):WaitForChild("RF"):WaitForChild("RequestJoin"):InvokeServer(unpack(args))

        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("WrestleService"):WaitForChild("RF"):WaitForChild("OnClick"):InvokeServer()

        -- Sleep for a short period to prevent overwhelming the server
        task.wait(0)  -- Adjust the interval as needed
    end
end

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop only if not already running
        if not isRunning then
            isRunning = true
            task.spawn(startLoop) -- Run loop in a new thread
        end
    else
        -- Stop the loop
        isRunning = false
    end
end)


local Toggle = Tabs.Part3:AddToggle("MyToggle", {Title = "NPC Boombeard", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["VillainCave-Boombeard"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.Part3:AddToggle("MyToggle", {Title = "NPC FacelessRecruit", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["VillainCave-FacelessRecruit"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)



local Toggle = Tabs.Part3:AddToggle("STRENGTH", {Title = "Crimson Shade Boss", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "CrimsonShade",
                    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("VillainCave"):WaitForChild("NPC"):WaitForChild("CrimsonShade"):WaitForChild("Table"),
                    [3] = "VillainCave"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)


local player = game:GetService("Players").LocalPlayer
local keysStorage = player.PlayerGui.GameUI.Menus.Items.Display.Items.MainFrame.ScrollingFrame.KeysStorage.Objects

if not Tabs or not Tabs.Part3 then
    warn("Tabs or Tabs.Part3 is nil. Make sure it is initialized.")
    return
end

local Toggle = Tabs.Part3:AddToggle("STRENGTH", {Title = "Crimson Fortune", Default = false})
local isRunning = false

Toggle:OnChanged(function(state)
    isRunning = state  -- Set running state based on toggle
    
    task.spawn(function()
        while isRunning do
            wait(1) -- Check every 1 second
            if keysStorage:FindFirstChild("Crimson Ticket/1") then
                while isRunning and keysStorage:FindFirstChild("Crimson Ticket/1") do
                    local args = {
                        [1] = "Crimson Fortune",
                        [2] = "x25"
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))
                        
                    wait(0)  -- Adjust the interval as needed
                end
            end
        end
    end)
end)


local player = game:GetService("Players").LocalPlayer
local keysStorage = player.PlayerGui.GameUI.Menus.Items.Display.Items.MainFrame.ScrollingFrame.KeysStorage.Objects

if not Tabs or not Tabs.Part3 then
    warn("Tabs or Tabs.Part3 is nil. Make sure it is initialized.")
    return
end

local Toggle = Tabs.Part3:AddToggle("STRENGTH", {Title = "VillainChest", Default = false})
local isRunning = false

Toggle:OnChanged(function(state)
    isRunning = state  -- Set running state based on toggle
    
    task.spawn(function()
        while isRunning do
            wait(1) -- Check every 1 second
            if keysStorage:FindFirstChild("Villain Chest Key/1") then
                while isRunning and keysStorage:FindFirstChild("Villain Chest Key/1") do
                    local args = {
                        [1] = "VillainChest"
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChestService"):WaitForChild("RF"):WaitForChild("Open"):InvokeServer(unpack(args))
                    
                    wait(0)  -- Adjust the interval as needed
                end
            end
        end
    end)
end)

local Toggle = Tabs.Iamrich:AddToggle("STRENGTH", {Title = "Villain", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Villain"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChampionshipService"):WaitForChild("RF"):WaitForChild("RequestJoin"):InvokeServer(unpack(args))
                      
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("WrestleService"):WaitForChild("RF"):WaitForChild("OnClick"):InvokeServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)



Tabs.Part3:AddParagraph({
    Title = "Train",
    Content = ""
})

if not game:GetService("RunService"):IsClient() then
    return -- Ensures this only runs on the client
end

local Toggle = Tabs.Part3:AddToggle("STRENGTH", {Title = "Dumbells +370%", Default = false})

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then -- Only act when enabled
        local args = {
            [1] = "VillainCave",
            [2] = "Dumbells",
            [3] = "VillainCave12"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages")
            :WaitForChild("Knit"):WaitForChild("Services")
            :WaitForChild("ToolService"):WaitForChild("RE")
            :WaitForChild("onGuiEquipRequest"):FireServer(unpack(args))

            local args = {
                [1] = workspace:WaitForChild("Zones"):WaitForChild("18"):WaitForChild("Interactables"):WaitForChild("Teleports"):WaitForChild("Locations"):WaitForChild("Spawn")
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ZoneService"):WaitForChild("RE"):WaitForChild("teleport"):FireServer(unpack(args))
            
    end
end)

if not game:GetService("RunService"):IsClient() then
    return -- Ensures this only runs on the client
end


local Toggle = Tabs.Part3:AddToggle("STRENGTH", {Title = "Auto click", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onClick"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.Part3:AddToggle("STRENGTH", {Title = "knuckle +390%=vip", Default = false})

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then -- Only act when enabled
        local args = {
            [1] = workspace:WaitForChild("Zones"):WaitForChild("19"):WaitForChild("Interactables"):WaitForChild("Teleports"):WaitForChild("Locations"):WaitForChild("Spawn")
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ZoneService"):WaitForChild("RE"):WaitForChild("teleport"):FireServer(unpack(args))
        
        local teleportCFrame = CFrame.new(-10314.9609, -45.1976357, 6195.48145, 0, 0, -1, 0, 1, 0, 1, 0, 0)
        
        local player = game.Players.LocalPlayer
        if player and player.Character then
            local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                -- First teleport
                humanoidRootPart.CFrame = CFrame.new(0, 100, 0) -- Temporary teleport position
                
                -- Wait 2 seconds before teleporting to the final position
                task.wait(2)
                
                -- Final teleport
                humanoidRootPart.CFrame = teleportCFrame
            end
        end
    end
end)

if not game:GetService("RunService"):IsClient() then
    return -- Ensures this only runs on the client
end

local Toggle = Tabs.Part3:AddToggle("STRENGTH", {Title = "knuckle +390%=free", Default = false})

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then -- Only act when enabled
        local args = {
            [1] = workspace:WaitForChild("Zones"):WaitForChild("19"):WaitForChild("Interactables"):WaitForChild("Teleports"):WaitForChild("Locations"):WaitForChild("Spawn")
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ZoneService"):WaitForChild("RE"):WaitForChild("teleport"):FireServer(unpack(args))
        
        local teleportCFrame = CFrame.new(-10314.9609, -45.1976357, 6203.521, -1.1920929e-07, 0, -1.00000012, 0, 1, 0, 1.00000012, 0, -1.1920929e-07)
        
        local player = game.Players.LocalPlayer
        if player and player.Character then
            local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                -- First teleport
                humanoidRootPart.CFrame = CFrame.new(0, 100, 0) -- Temporary teleport position
                
                -- Wait 2 seconds before teleporting to the final position
                task.wait(2)
                
                -- Final teleport
                humanoidRootPart.CFrame = teleportCFrame
            end
        end
    end
end)

if not game:GetService("RunService"):IsClient() then
    return -- Ensures this only runs on the client
end

local Toggle = Tabs.Part3:AddToggle("STRENGTH", {Title = "Auto click for knuckle=vip", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "VillainCave",
                    [2] = "VIP",
                    [3] = true
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("PunchBagService"):WaitForChild("RE"):WaitForChild("onGiveStats"):FireServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

if not game:GetService("RunService"):IsClient() then
    return -- Ensures this only runs on the client
end

local Toggle = Tabs.Part3:AddToggle("STRENGTH", {Title = "Auto click for knuckle=free", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "VillainCave",
                    [2] = "Tier6"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("PunchBagService"):WaitForChild("RE"):WaitForChild("onGiveStats"):FireServer(unpack(args))
                                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)






























--olds event


local Toggle = Tabs.Iamrich:AddToggle("STRENGTH", {Title = "Ghost Fortune 10x", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Ghost Fortune",
                    [2] = "x25"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)


































--event=new





local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Superhero Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Superhero", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Supervillain Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Supervillain", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Bulk Egg", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Bulk", -- Name of the egg
                    [2] = nil,       -- Placeholder (not used)
                    [3] = nil,       -- Triple Egg (gamepass)
                    [4] = false,     -- Auto Egg (gamepass)
                    [5] = nil,       -- Placeholder (not used)
                    [6] = true       -- Max egg
                }

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Bulk Smash Fortune x10", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Bulk Smash Fortune",
                    [2] = "x25"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Boss Cryzo", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Cryzo",
                    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("HeroCity"):WaitForChild("NPC"):WaitForChild("Cryzo"):WaitForChild("Table"),
                    [3] = "HeroCity"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)


local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "PunchBag vip", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "HeroCity",
                    [2] = "VIP3",
                    [3] = true
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("PunchBagService"):WaitForChild("RE"):WaitForChild("onGiveStats"):FireServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)


local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "PunchBag Free", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "HeroCity",
                    [2] = "Tier9"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("PunchBagService"):WaitForChild("RE"):WaitForChild("onGiveStats"):FireServer(unpack(args))
                
                local args = {
                    [1] = "HeroCity",
                    [2] = "Tier8"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("PunchBagService"):WaitForChild("RE"):WaitForChild("onGiveStats"):FireServer(unpack(args))
                
                local args = {
                    [1] = "HeroCity",
                    [2] = "Tier7"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("PunchBagService"):WaitForChild("RE"):WaitForChild("onGiveStats"):FireServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Craft chest", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Superhero Chest"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TreasureChestService"):WaitForChild("RF"):WaitForChild("Craft"):InvokeServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Open chest", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = {
                        ["Item"] = "Superhero Chest",
                        ["Tier"] = "1"
                    },
                    [2] = 8
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemService"):WaitForChild("RF"):WaitForChild("UseChest"):InvokeServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "HeroCity barbells", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "HeroCity",
                    [2] = "Barbells",
                    [3] = "HeroCity9"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onEquipRequest"):FireServer(unpack(args))
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onClick"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Jolt", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["SuperheroCity-Jolt"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Radiance", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["SuperheroCity-Radiance"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Phantom", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["SuperheroCity-Phantom"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Inferno", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["SuperheroCity-Inferno"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Spectron", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["EvilLair-Spectron"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Vortex", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["EvilLair-Vortex"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Skullbane", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["EvilLair-Skullbane"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("MyToggle", {Title = "NPC Dreadlord", Default = false })

local running = false -- Variable to control the loop

Toggle:OnChanged(function(state) -- 'state' is true if toggle is ON, false if OFF
    running = state

    if running then
        local npc = workspace.GameObjects.RngNPCs["EvilLair-Dreadlord"]
        local proximityPrompts = {}

        -- Function to collect ProximityPrompts
        local function collectProximityPrompts()
            proximityPrompts = {} -- Reset table to prevent duplicates

            -- Add ProximityPrompts from specific indices (5, 4, 3, 2)
            local specificIndices = {5, 4, 3, 2}
            for _, index in ipairs(specificIndices) do
                local child = npc.Npc:GetChildren()[index]
                if child and child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end

            -- Also add all dynamically found ProximityPrompts (in case more exist)
            for _, child in ipairs(npc.Npc:GetChildren()) do
                if child:FindFirstChild("Table") and child.Table:FindFirstChild("Proximity") and 
                   child.Table.Proximity:FindFirstChild("Attachment") and 
                   child.Table.Proximity.Attachment:FindFirstChild("ProximityPrompt") then

                    table.insert(proximityPrompts, child.Table.Proximity.Attachment.ProximityPrompt)
                end
            end
        end

        -- Function to trigger all found ProximityPrompts
        local function autoFight()
            while running do -- Loop only runs while 'running' is true
                collectProximityPrompts() -- Refresh the ProximityPrompts list
                if #proximityPrompts > 0 then
                    for _, prompt in ipairs(proximityPrompts) do
                        fireproximityprompt(prompt)
                    end
                    print("Auto fight triggered!")
                else
                    warn("No ProximityPrompts found!")
                end
                task.wait(1) -- Adjust delay if needed
            end
        end

        -- Start auto-fighting in a new thread
        task.spawn(autoFight)
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Dumbells", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "HeroCity",
                    [2] = "Dumbells",
                    [3] = "HeroCity12"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onGuiEquipRequest"):FireServer(unpack(args))

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onClick"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "All upgrade", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Super Power Multiplier"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("HeroUpgradeService"):WaitForChild("RF"):WaitForChild("BuyUpgrade"):InvokeServer(unpack(args))

                local args = {
                    [1] = "Super Knuckles Multiplier"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("HeroUpgradeService"):WaitForChild("RF"):WaitForChild("BuyUpgrade"):InvokeServer(unpack(args))

                local args = {
                    [1] = "Super Coin Multiplier"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("HeroUpgradeService"):WaitForChild("RF"):WaitForChild("BuyUpgrade"):InvokeServer(unpack(args))

                local args = {
                    [1] = "Gem Chance Multiplier"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("HeroUpgradeService"):WaitForChild("RF"):WaitForChild("BuyUpgrade"):InvokeServer(unpack(args))
                
                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Skullshade", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Skullshade",
                    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("HeroCity"):WaitForChild("NPC"):WaitForChild("Skullshade"):WaitForChild("Table"),
                    [3] = "HeroCity"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "HeroSpeedrun", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "HeroSpeedrun"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpeedrunMinigameService"):WaitForChild("RF"):WaitForChild("EnterSpeedrun"):InvokeServer(unpack(args))
                
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-10949.7832, 63.7595329, 5928.90137, 1, 0, 0, 0, 1, 0, 0, 0, 1)
wait()
                -- Sleep for a short period to prevent overwhelming the server
                wait(620)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Evil Merchant 1", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Evil Merchant",
                    [2] = 1
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
                
                             -- Sleep for a short period to prevent overwhelming the server
                wait(120)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Evil Merchant 2", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Evil Merchant",
                    [2] = 2
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
                
                             -- Sleep for a short period to prevent overwhelming the server
                wait(120)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Evil Merchant 3", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Evil Merchant",
                    [2] = 3
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
                
                             -- Sleep for a short period to prevent overwhelming the server
                wait(120)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Evil Merchant 4", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Evil Merchant",
                    [2] = 4
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
                
                             -- Sleep for a short period to prevent overwhelming the server
                wait(120)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

local Toggle = Tabs.New:AddToggle("STRENGTH", {Title = "Evil Merchant 5", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                local args = {
                    [1] = "Evil Merchant",
                    [2] = 5
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
                
                             -- Sleep for a short period to prevent overwhelming the server
                wait(120)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)

Tabs.New:AddButton({
    Title = "AFK",
    Description = "AFK",
    Callback = function()
        wait(0.5)local ba=Instance.new("ScreenGui")
        local ca=Instance.new("TextLabel")local da=Instance.new("Frame")
        local _b=Instance.new("TextLabel")local ab=Instance.new("TextLabel")ba.Parent=game.CoreGui
        ba.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;ca.Parent=ba;ca.Active=true
        ca.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ca.Draggable=true
        ca.Position=UDim2.new(0.698610067,0,0.098096624,0)ca.Size=UDim2.new(0,370,0,52)
        ca.Font=Enum.Font.SourceSansSemibold;ca.Text="Anti AFK Script"ca.TextColor3=Color3.new(0,1,1)
        ca.TextSize=22;da.Parent=ca
        da.BackgroundColor3=Color3.new(0.196078,0.196078,0.196078)da.Position=UDim2.new(0,0,1.0192306,0)
        da.Size=UDim2.new(0,370,0,107)_b.Parent=da
        _b.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)_b.Position=UDim2.new(0,0,0.800455689,0)
        _b.Size=UDim2.new(0,370,0,21)_b.Font=Enum.Font.Arial;_b.Text="made by iamrich "
        _b.TextColor3=Color3.new(0,1,1)_b.TextSize=20;ab.Parent=da
        ab.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ab.Position=UDim2.new(0,0,0.158377,0)
        ab.Size=UDim2.new(0,370,0,44)ab.Font=Enum.Font.ArialBold;ab.Text="Status: Active"
        ab.TextColor3=Color3.new(0,1,1)ab.TextSize=20;local bb=game:service'VirtualUser'
        game:service'Players'.LocalPlayer.Idled:connect(function()
        bb:CaptureController()bb:ClickButton2(Vector2.new())
        ab.Text="Roblox tried to kick u but i kicked him instead"wait(2)ab.Text="Status : Active"end)
    end
})






































--MUTATE








Tabs.Mutate:AddParagraph({
    Title = "This is for cure",
    Content = "If u selet the Ghost it will  cure all pet but no the Ghost"
})

Tabs.Mutate:AddParagraph({
    Title = "so use the one is Rainbow,Ghost,Cosmic it will cure all pet but no the one u selet",
    Content = ""
})

local Toggle = Tabs.Mutate:AddToggle("MyToggle", {Title = "Mutate", Default = false})

-- Reference to services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
local mutateRF = PetCombineService:WaitForChild("RF"):WaitForChild("mutate")

-- Function to automatically mutate pets
local function autoMutatePets()
    -- Get the pet container from the player's UI
    local player = game.Players.LocalPlayer
    local petsContainer = player.PlayerGui.GameUI.Menus.Mutate.Container.Left.Pets

    -- Loop through all pet UI elements inside the container
    for _, petUI in ipairs(petsContainer:GetChildren()) do
        -- Get the pet name from the pet UI element
        local petName = petUI.Name

        -- Make sure the pet name exists
        if petUI:IsA("Frame") then
            -- Assuming pet names are mapped directly to pet IDs (you may need to adjust this logic if needed)
            local petId = petName  -- Adjust this if necessary to map the pet name to a unique ID

            -- Create the arguments for the mutate function
            local args = {
                [1] = petId,  -- The pet ID
                [2] = {}      -- An empty table as the second argument
            }

            -- Invoke the mutate function on the server
            mutateRF:InvokeServer(unpack(args))
            print("Mutating pet: " .. petId)  -- Debug message to confirm the pet is being mutated
        end
    end
end

-- Variable to check if the toggle is on
local isToggleOn = Toggle.Value

-- Loop when toggle is on
Toggle:OnChanged(function()
    -- Check if the toggle is on
    if Toggle.Value then
        isToggleOn = true
        -- Run a loop to auto mutate pets every 1 second
        while isToggleOn do
            autoMutatePets()
            wait(1)  -- Delay of 1 second
        end
    else
        -- If toggle is off, stop the loop
        isToggleOn = false
    end
end)

local teleportCFrames = {
    CFrame.new(-10395.6162, 2.01967621, -651.545593,  0.247232601, 0, -0.968954921,  0, 1, 0,  0.968954921, 0, 0.247232601),
    CFrame.new(-10376.0342, 1.86712646, -666.283752,  0.657927096, 0, 0.753075361,  0, 1, 0,  -0.753075361, 0, 0.657927096)
}

local Toggle = Tabs.Mutate:AddToggle("MyToggle", {Title = "Auto mutate", Default = false})

local teleporting = false  -- Variable to control teleportation loop

Toggle:OnChanged(function()
    print("Toggle changed:", Toggle.Value)  -- Use Toggle.Value instead of Options.MyToggle.Value

    -- If toggle is turned on
    if Toggle.Value then
        teleporting = true  -- Start teleporting
        print("Teleporting started.")
        
        -- Continuous teleport loop
        while teleporting do
            local player = game.Players.LocalPlayer
            local character = player and (player.Character or player.CharacterAdded:Wait())
            local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

            if humanoidRootPart then
                -- Teleport to first location
                humanoidRootPart.CFrame = teleportCFrames[1]
                print("Teleported to First Location:", teleportCFrames[1].Position)

                -- Wait 2 seconds, then teleport to second location
                task.wait(1)
                humanoidRootPart.CFrame = teleportCFrames[2]
                print("Teleported to Second Location:", teleportCFrames[2].Position)
                
                -- Wait 2 seconds, then start again
                task.wait(1)
            else
                warn("HumanoidRootPart not found!")
            end
        end
    else
        teleporting = false  -- Stop teleporting when toggle is off
        print("Teleporting stopped.")
    end
end)



local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Rainbow,Ghost", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Rainbow" or attrValue == "Ghost" or attrValue == ".") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)

local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Rainbow,Ghost,Cosmic", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Rainbow" or attrValue == "Ghost" or attrValue == "Cosmic") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)

local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Ghost,Cosmic", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "" or attrValue == "Ghost" or attrValue == "Cosmic") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)

local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Rainbow", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Rainbow" or attrValue == "." or attrValue == ".") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)

local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Ghost", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Ghost" or attrValue == "." or attrValue == ".") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)


local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Cosmic", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Cosmic" or attrValue == "." or attrValue == ".") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)



local Toggle = Tabs.Mutate:AddToggle("hi", {Title = "Glowing", Default = false})

local running = false

Toggle:OnChanged(function(isToggled)
    -- Start checking when toggle is on
    if isToggled and not running then
        running = true
        while running do
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local petsFrame = localPlayer.PlayerGui.GameUI.Menus.Cure.Container.Left.Pets

            -- Function to check if a pet should be cured
            local function shouldCurePet(pet)
                local petToggle = pet:FindFirstChild("Toggle")
                if petToggle then
                    -- Check attributes
                    for attrName, attrValue in pairs(petToggle:GetAttributes()) do
                        if attrName == "Cure" and (attrValue == "Glowing" or attrValue == "." or attrValue == ".") then
                            print("Skipping pet:", pet.Name, "because Cure =", attrValue)
                            return false -- Skip this pet
                        end
                    end
                end
                return true -- Pet should be cured
            end

            -- Function to auto-cure pets
            local function autoCurePets()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
                local PetCombineService = Knit:WaitForChild("Services"):WaitForChild("PetCombineService")
                local cureRF = PetCombineService:WaitForChild("RF"):WaitForChild("cure")

                for _, pet in pairs(petsFrame:GetChildren()) do
                    if pet:IsA("Frame") or pet:IsA("Folder") then -- Ensure it's a valid UI container
                        print("Pet Name:", pet.Name)

                        if shouldCurePet(pet) then
                            -- Attempt to cure the pet
                            local args = { [1] = pet.Name } -- Assuming the pet ID is the name, adjust if necessary
                            cureRF:InvokeServer(unpack(args))
                            print("Curing pet:", pet.Name)
                        end
                    end
                end
            end

            -- Call the function to auto-cure pets
            autoCurePets()

            -- Wait 1 second before checking again
            wait(1)

            -- Check if the toggle is off to stop the loop
            if not Toggle.Value then
                running = false
            end
        end
    elseif not isToggled and running then
        -- Stop the loop if toggle is turned off
        running = false
    end
end)























--lock








Tabs.Lock:AddButton({
    Title = "Lock all pet",
    Description = "All your pets will be locked, but you won’t see the 🔒",
    Callback = function()
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                if lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end
    end
})


local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Glowing", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                if cureAttribute == "Glowing" and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Add a small delay to prevent excessive requests
    end
end)

local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Rainbow", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                if cureAttribute == "Rainbow" and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Add a small delay to prevent excessive requests
    end
end)


local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Ghost", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }
        local validCures = { ["Ghost"] = true, ["."] = true, ["."] = true } -- Allowed attributes

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                -- Check if Cure is in the allowed list and if pet is not already locked
                if validCures[cureAttribute] and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Small delay to prevent excessive requests
    end
end)

local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Cosmic", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }
        local validCures = { ["Cosmic"] = true, ["."] = true, ["."] = true } -- Allowed attributes

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                -- Check if Cure is in the allowed list and if pet is not already locked
                if validCures[cureAttribute] and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Small delay to prevent excessive requests
    end
end)


local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Glowing,Rainbow,Cosmic,Ghost", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }
        local validCures = { ["Glowing"] = true, ["Rainbow"] = true, ["Cosmic"] = true, ["Ghost"] = true} -- Allowed attributes

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                -- Check if Cure is in the allowed list and if pet is not already locked
                if validCures[cureAttribute] and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Small delay to prevent excessive requests
    end
end)

local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Ghost,Rainbow,Cosmic", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }
        local validCures = { ["Ghost"] = true, ["Rainbow"] = true, ["Cosmic"] = true } -- Allowed attributes

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                -- Check if Cure is in the allowed list and if pet is not already locked
                if validCures[cureAttribute] and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Small delay to prevent excessive requests
    end
end)

local isRunning = false -- Variable to control the loop

local Toggle = Tabs.Lock:AddToggle("MyToggle", {Title = "Ghost,Cosmic", Default = false })

Toggle:OnChanged(function(state)
    isRunning = state -- Update the loop control variable

    while isRunning do
        local player = game:GetService("Players").LocalPlayer
        local petsFrame = player.PlayerGui.GameUI.Menus.Inventory.Display.Pets.ScrollingFrame.Pets
        local petService = game:GetService("ReplicatedStorage"):WaitForChild("Packages", 9e9)
            :WaitForChild("Knit", 9e9):WaitForChild("Services", 9e9)
            :WaitForChild("PetService", 9e9):WaitForChild("RF", 9e9)
            :WaitForChild("updateLocked", 9e9)

        local args = { [1] = {} }
        local validCures = { ["Ghost"] = true, ["."] = true, ["Cosmic"] = true } -- Allowed attributes

        for _, pet in ipairs(petsFrame:GetChildren()) do
            local petId = pet.Name
            local toggleButton = pet:FindFirstChild("Toggle")

            if toggleButton then
                local cureAttribute = toggleButton:GetAttribute("Cure")
                local lockPetButton = toggleButton:FindFirstChild("LockPet")

                -- Check if Cure is in the allowed list and if pet is not already locked
                if validCures[cureAttribute] and lockPetButton and not lockPetButton.Visible then
                    args[1][petId] = true
                end
            end
        end

        if next(args[1]) then
            petService:InvokeServer(unpack(args))
        end

        wait(0) -- Small delay to prevent excessive requests
    end
end)










































local Toggle = Tabs.Other:AddToggle("STRENGTH", {Title = "Trainer", Default = false})

local isRunning = false

-- List of crate types
local crates = {
    "Starter Crate",
    "Gold Crate",
    "Mythic Crate",
    "Premium Crate",
    "Prism Crate",
    "Galaxy Crate"
}

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                for _, crate in ipairs(crates) do
                    -- Set the arguments for the crate purchase
                    local args = { [1] = crate }
                    -- Invoke the server function to open the crate
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer(unpack(args))
                    
                    -- Sleep for a short period to prevent overwhelming the server
                    wait(0.5)  -- Adjust the interval as needed (e.g., 0.5 seconds between crate openings)
                end
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)


local Toggle = Tabs.Other:AddToggle("STRENGTH", {Title = "auto aura", Default = false})

local isRunning = false

-- Listen for the toggle change
Toggle:OnChanged(function(state)
    if state then
        -- Start the loop when the toggle is on
        if not isRunning then
            isRunning = true
            -- Loop while the toggle is on
            while isRunning do
                -- Set the arguments for the egg purchase
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("AuraService"):WaitForChild("RF"):WaitForChild("Roll"):InvokeServer()

                -- Sleep for a short period to prevent overwhelming the server
                wait(0)  -- Adjust the interval as needed
            end
        end
    else
        -- Stop the loop when the toggle is off
        isRunning = false
    end
end)



--Other
    local Toggle = Tabs.Other:AddToggle("MyToggle", {Title = "Afk", Default = false })

    Toggle:OnChanged(function()
    wait(0.5)local ba=Instance.new("ScreenGui")
local ca=Instance.new("TextLabel")local da=Instance.new("Frame")
local _b=Instance.new("TextLabel")local ab=Instance.new("TextLabel")ba.Parent=game.CoreGui
ba.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;ca.Parent=ba;ca.Active=true
ca.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ca.Draggable=true
ca.Position=UDim2.new(0.698610067,0,0.098096624,0)ca.Size=UDim2.new(0,370,0,52)
ca.Font=Enum.Font.SourceSansSemibold;ca.Text="Anti AFK Script"ca.TextColor3=Color3.new(0,1,1)
ca.TextSize=22;da.Parent=ca
da.BackgroundColor3=Color3.new(0.196078,0.196078,0.196078)da.Position=UDim2.new(0,0,1.0192306,0)
da.Size=UDim2.new(0,370,0,107)_b.Parent=da
_b.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)_b.Position=UDim2.new(0,0,0.800455689,0)
_b.Size=UDim2.new(0,370,0,21)_b.Font=Enum.Font.Arial;_b.Text="made by ur mom "
_b.TextColor3=Color3.new(0,1,1)_b.TextSize=20;ab.Parent=da
ab.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ab.Position=UDim2.new(0,0,0.158377,0)
ab.Size=UDim2.new(0,370,0,44)ab.Font=Enum.Font.ArialBold;ab.Text="Status: Active"
ab.TextColor3=Color3.new(0,1,1)ab.TextSize=20;local bb=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
bb:CaptureController()bb:ClickButton2(Vector2.new())
ab.Text="Roblox tried to kick u but i kicked him instead"wait(2)ab.Text="Status : Active"end)
    end)
